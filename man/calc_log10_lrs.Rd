% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_log10_lrs.R
\name{calc_log10_lrs}
\alias{calc_log10_lrs}
\title{Calculate log10_lrs for multiple bloodmeal-human pairs}
\usage{
calc_log10_lrs(
  bloodmeal_profiles,
  human_profiles,
  pop_allele_freqs,
  kit,
  peak_thresh,
  bloodmeal_ids = NULL,
  human_ids = NULL,
  model_degrad = TRUE,
  model_bw_stutt = FALSE,
  model_fw_stutt = FALSE,
  difftol = 1,
  threads = 4,
  seed = NULL,
  time_limit = 3,
  check_inputs = TRUE
)
}
\arguments{
\item{bloodmeal_profiles}{Tibble or data frame with alleles for all
bloodmeals in reference database including 4 columns: SampleName, Marker,
Allele, Height. Height must be numeric or coercible to numeric.}

\item{human_profiles}{Tibble or data frame with alleles for all humans in
reference database including three columns: SampleName, Marker, Allele.}

\item{pop_allele_freqs}{Tibble or data frame where the first column is the
STR allele and the following columns are the frequency of that allele for
different markers. Alleles that do not exist for a given marker are coded
as NA. If NULL and \code{calc_allele_freqs = TRUE}, then population allele
frequencies will be calculated from \code{human_profiles}.}

\item{kit}{STR kit name from euroformix. To see a list of all kits embedded
in euroformix use \code{\link[euroformix:getKit]{euroformix::getKit()}}. If your kit is not included, see
vignette("bistro") for details on how to include your own kit.}

\item{peak_thresh}{Allele peak height threshold in RFUs. All peaks under this
threshold will be filtered out. If prior filtering was performed, this
number should be equal to or greater than that number. Also used for
\code{threshT} argument in \code{\link[euroformix:contLikSearch]{euroformix::contLikSearch()}}.}

\item{bloodmeal_ids}{Vector of bloodmeal ids from the SampleName column in
\code{bloodmeal_profiles} for which to compute log10_lrs. If NULL, all ids in
the input dataframe will be used. Default: NULL}

\item{human_ids}{Vector of human ids from the SampleName column in
\code{human_profiles} for which to compute log10_lrs. If NULL, all ids in the
input dataframe will be used. Default: NULL}

\item{model_degrad}{A boolean indicating whether or not to model peak
degradation. Used for \code{modelDegrad} argument in
\code{\link[euroformix:contLikSearch]{euroformix::contLikSearch()}}. Default: TRUE}

\item{model_bw_stutt}{A boolean indicating whether or not to model peak
backward stutter. Used for \code{modelBWstutt} argument in
\code{\link[euroformix:contLikSearch]{euroformix::contLikSearch()}}. Default: FALSE}

\item{model_fw_stutt}{A boolean indicating whether or not to model peak
forward stutter. Used for \code{modelFWstutt} argument in
\code{\link[euroformix:contLikSearch]{euroformix::contLikSearch()}}. Default: FALSE}

\item{difftol}{Tolerance for difference in log likelihoods across 2
iterations. \code{\link[euroformix:contLikSearch]{euroformix::contLikSearch()}} argument. Default: 1}

\item{threads}{Number of threads to use when calculating log10_lrs.
\code{\link[euroformix:contLikSearch]{euroformix::contLikSearch()}} argument. Default: 4}

\item{seed}{Seed when calculating log10_lrs. \code{\link[euroformix:contLikSearch]{euroformix::contLikSearch()}}
argument. Default: NULL (no seed)}

\item{time_limit}{Time limit in minutes to run the
\code{\link[euroformix:contLikSearch]{euroformix::contLikSearch()}} function on 1 bloodmeal-human pair. Default:
3}

\item{check_inputs}{A boolean indicating whether or not to check the
inputs to the function. Default: TRUE}
}
\value{
A tibble with the same output as for \code{\link[=bistro]{bistro()}}, except there is no
match column and every bloodmeal-human pair with the calculated log10_lr is
included. The only additional column is \code{efm_noc} which is the number of
contributors used for \code{\link[euroformix:contLikSearch]{euroformix::contLikSearch()}}. This has a maximum
value of 3.
}
\description{
Note that this function doesn't preprocess the bloodmeal and human profile
data. If you would like to preprocess it in the same way as is performed
internally in the \code{bistro()} function, you must run
\code{prep_bloodmeal_profiles()} and \code{prep_human_profiles()} first.
}
\examples{
bm_profs <- prep_bloodmeal_profiles(bloodmeal_profiles, peak_thresh = 200)
hu_profs <- prep_human_profiles(human_profiles)
log10_lrs <- calc_log10_lrs(bm_profs,
  hu_profs,
  bloodmeal_ids = "evid1",
  pop_allele_freqs = pop_allele_freqs,
  kit = "ESX17",
  peak_thresh = 200
)
}
